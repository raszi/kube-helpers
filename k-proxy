#!/usr/bin/env ruby

BASE_PORT = 8001

require 'yaml'
require 'io/console'
require 'socket'
require 'timeout'

CONFIG = YAML.load_file(File.join(ENV['HOME'], '.kube', 'config'))

def port_open?(ip, port, seconds=1)
  Timeout::timeout(seconds) do
    TCPSocket.new(ip, port).close
    true
  end
rescue Timeout::Error, Errno::ECONNREFUSED, Errno::EHOSTUNREACH
  false
end

def mapping(matcher)
  return { CONFIG['current-context'] => BASE_PORT } if matcher.nil?

  regexp = Regexp.new(matcher.gsub('*', '.*'))

  clusters = CONFIG['clusters'].map { |cluster| cluster['name'] }
  mappings = clusters.grep(regexp).each_with_index.map { |cluster, index| [cluster, BASE_PORT + index] }

  Hash[mappings]
end

def wait_for_pids(pids)
  while !pids.all? { |port| port_open?('127.0.0.1', port) }
    yield
  end
end

# MAIN

mappings = mapping(ARGV.first)

pids = mappings.map do |cluster, port|
  Process.spawn('kubectl', '--context', cluster, 'proxy', '--port', port.to_s, '--accept-hosts', 'localtest.me$', out: '/dev/null')
end

wait_for_pids(mappings.values) { sleep(0.5) }

mappings.each do |cluster, port|
  fork { exec('open', '-g', "http://#{cluster}.localtest.me:#{port}/ui") }
end

puts 'Leave proxies? (Q)uit (L)eave'

if STDIN.getch.downcase == 'q'
  puts 'Killing proxies...'
  Process.kill(*['TERM'].concat(pids))
end
